// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Crisp
import AVFoundation
import AVKit
import Combine
import CoreGraphics
@_exported import Crisp
import Foundation
import MobileCoreServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
precedencegroup MonoidAppend {
  associativity: left
  higherThan: AssignmentPrecedence
}
infix operator <> : MonoidAppend
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class CrispSDK : ObjectiveC.NSObject {
  @objc public static func configure(websiteID: Swift.String)
  @objc public static func setTokenID(tokenID: Swift.String)
  @objc public static var locale: Foundation.Locale
  @objc public static var user: Crisp.User
  @objc public static var session: Crisp.Session
  @objc deinit
}
@objc(CRSPSessionEventColor) public enum SessionEventColor : Swift.Int {
  case red
  case orange
  case yellow
  case green
  case blue
  case purple
  case pink
  case brown
  case grey
  case black
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(CRSPSessionEvent) @objcMembers final public class SessionEvent : ObjectiveC.NSObject {
  @objc final public var name: Swift.String
  @objc final public var color: Crisp.SessionEventColor
  @objc public init(name: Swift.String, color: Crisp.SessionEventColor)
  @objc final public func setBool(_ value: Swift.Bool, forKey key: Swift.String)
  @objc final public func setInt(_ value: Swift.Int, forKey key: Swift.String)
  @objc final public func setString(_ value: Swift.String, forKey key: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(CRSPSession) @objcMembers final public class Session : ObjectiveC.NSObject {
  @objc final public var isOngoing: Swift.Bool {
    @objc get
  }
  @objc final public var identifier: Swift.String? {
    @objc get
  }
  @objc final public func setBool(_ value: Swift.Bool, forKey key: Swift.String)
  final public func getBool(forKey key: Swift.String) -> Swift.Bool?
  @objc final public func setInt(_ value: Swift.Int, forKey key: Swift.String)
  final public func getInt(forKey key: Swift.String) -> Swift.Int?
  @objc final public func setString(_ value: Swift.String, forKey key: Swift.String)
  @objc final public func getString(forKey key: Swift.String) -> Swift.String?
  @objc final public func pushEvent(_ event: Crisp.SessionEvent)
  @objc final public var segment: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public func reset()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(CRSPUser) @objcMembers final public class User : ObjectiveC.NSObject {
  @objc final public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var nickname: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var avatar: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc final public var company: Crisp.Company? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(CRSPCompany) @objcMembers final public class Company : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String?
  @objc final public let url: Foundation.URL?
  @objc final public let companyDescription: Swift.String?
  @objc final public let employment: Crisp.Employment?
  @objc final public let geolocation: Crisp.Geolocation?
  @objc public init(name: Swift.String?, url: Foundation.URL?, companyDescription: Swift.String?, employment: Crisp.Employment?, geolocation: Crisp.Geolocation?)
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc(CRSPEmployment) @objcMembers final public class Employment : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let title: Swift.String?
  @objc final public let role: Swift.String?
  @objc public init(title: Swift.String?, role: Swift.String?)
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc(CRSPGeolocation) @objcMembers final public class Geolocation : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let city: Swift.String?
  @objc final public let country: Swift.String?
  @objc public init(city: Swift.String?, country: Swift.String?)
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(CRSPChatViewController) @_Concurrency.MainActor(unsafe) final public class ChatViewController : UIKit.UINavigationController {
  @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var isNavigationBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func setNavigationBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func popViewController(animated: Swift.Bool) -> UIKit.UIViewController?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func popToViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool) -> [UIKit.UIViewController]?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func popToRootViewController(animated: Swift.Bool) -> [UIKit.UIViewController]?
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var topViewController: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var visibleViewController: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var viewControllers: [UIKit.UIViewController] {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func setViewControllers(_ viewControllers: [UIKit.UIViewController], animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var isToolbarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func setToolbarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var toolbar: UIKit.UIToolbar! {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var interactivePopGestureRecognizer: UIKit.UIGestureRecognizer? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var delegate: UIKit.UINavigationControllerDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public func show(_ vc: UIKit.UIViewController, sender: Any?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var hidesBarsWhenKeyboardAppears: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var hidesBarsOnSwipe: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var barHideOnSwipeGestureRecognizer: UIKit.UIPanGestureRecognizer {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var hidesBarsWhenVerticallyCompact: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var hidesBarsOnTap: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var barHideOnTapGestureRecognizer: UIKit.UITapGestureRecognizer {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
extension Crisp.SessionEventColor : Swift.Equatable {}
extension Crisp.SessionEventColor : Swift.Hashable {}
extension Crisp.SessionEventColor : Swift.RawRepresentable {}
